# -*- coding: utf-8 -*-
"""scatterer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jKoJYbfRpIViIBmPZ0UlDa7HJZJf5qOn
"""

#Jasvith Raj Basani
#
#
#History
# 19/11/2022 - Created this File

import numpy as np
import jax.numpy as jnp
from jax import jit, grad
from functools import partial

class Scatterer:

  def __init__(self,
               v_g: jnp.float32 = 1.0
               ):
    r"""
    Class of differentiable transfer functions.
    In particular, returns frequency dependent reflection/transmission coefficients
    These coefficients can be found here: https://doi.org/10.1364/PRJ.1.000110
    param v_g: group velocity to which all terms are normalized, set to 1.0
    """
    self.v_g = v_g

  @partial(jit, static_argnums = (0, ))
  def delta_func(self, k, p):
    if (k == p):
      return 1
    else:
      return 0

  @partial(jit, static_argnums = (0, ))
  def t_1(self, k, p, Delta, Gamma, gamma):
    return ((k - Delta - 1j * (Gamma - gamma)/self.v_g)/(k - Delta + 1j * (Gamma + gamma)/self.v_g)) * self.delta_func(k, p)

  
  def r_1(self, k, p):
    raise NotImplementedError()