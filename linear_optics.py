# -*- coding: utf-8 -*-
"""linear_optics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ovSbRW6ch6YU20pNs-m1EXzS8S3vVF0l
"""

#Jasvith Raj Basani
#
#
#History
# 15/11/2022 - Created this File

import numpy as np
import jax.numpy as jnp
from jax import jit
import scipy.stats
from functools import partial

class Linear_Optics:

  def __init__(self,
               N_modes: jnp.int16 = None,
               ):
    
    r"""
    Class of differentiable linear optics tools.
    In particular, returns matrices implemented by photonic integrated meshes
    param N_modes: Number of spatial modes input to the network.
    """
    self.N_modes = N_modes

  def haar_mat(self, N_modes):
    r"""
    Returns NxN Haar random unitary matrix
    param N_modes: Number of spatial modes input to the network.
    """
    return scipy.stats.unitary_group.rvs(N_modes)


  @partial(jit, static_argnums = (0, ))
  def MZI(self, theta, phi, alpha = 0 + 0j, beta = 0 + 0j):
    assert self.N_modes == 2

    r"""
    Single MZI transfer function, to return a 2x2 unitary transformation
    param theta: Phase shift value
    param phi: Phase shift values
    param alpha: Beamsplitter error value
    param beta: Beamsplitter error value
    Matrix given by: eq (5) in arXiv:2103.04993
    """

    t_00 = jnp.exp(1j * phi) * (jnp.cos(alpha - beta) * jnp.sin(theta/2) + 1j * jnp.sin(alpha + beta) * jnp.cos(theta/2))
    t_01 = (jnp.cos(alpha + beta) * jnp.cos(theta/2) + 1j * jnp.sin(alpha - beta) * jnp.sin(theta/2))
    t_10 = jnp.exp(1j * phi) * (jnp.cos(alpha + beta) * jnp.cos(theta/2) - 1j * jnp.sin(alpha - beta) * jnp.sin(theta/2))
    t_11 = -(jnp.cos(alpha - beta) * jnp.sin(theta/2) + 1j * jnp.sin(alpha + beta) * jnp.cos(theta/2))
    T = 1j * jnp.exp(1j * theta/2) * jnp.array([[t_00, t_01],
                                                [t_10, t_11]])
    return T


  def clements(theta, phi, D, alpha, beta):

    r"""
    Differentiable clements matrix, to return a NxN unitary transformation
    param theta: 1D array of phase shift values - MZIs are indexed from top to bottom and left to right
    param phi: 1D array of phase shift values
    param D: 1D array for output phase screen
    param alpha: 1D array for directional coupler errors
    param beta: 1D array for directional coupler errors
    """

    raise NotImplementedError()

